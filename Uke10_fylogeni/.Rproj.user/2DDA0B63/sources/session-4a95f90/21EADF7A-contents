---
title: "Innlevering uke 5, BIN210"
author: "Par-gruppe 55: Ane Kleiven og Katrine Weilin Fredheim"
date: "2025-03-03"
output: 
  html_document: 
    number_sections: false
    fig.caption: true  
    toc: true 
    toc_float: true
    code_download: true
    theme: yeti
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

# 1 Bruk av artificial intelligence (AI) 

ChatGPT (versjon 4) ble brukt til diverse kodefeil og noe generering av tekst. 
Github Copilot ble brukt til noe generering av kode. 


# Laste inn nødvendige pakker 

```{r}
library(pwalign)
library(microseq)
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(grid)
```


# 2 Scoring av ferdigserverte sammenstillinger


## 2.1 Enkleste variant 

Scoringsregel: 

- 1 for likhet 

- -3 for ulikhet 

Bruk dette og regn ut score for sammenstillingene: 

A:        B:         C:
AATCT     GCCTGC     AAAAAAAA
ATTCT     GGCCGC     TTTTTTTT

```{r}
A1 <- c("A", "A", "T", "C", "T") 
A2 <- c("A", "T", "T", "C", "T") 

B1 <- c("G", "C", "C", "T", "G", "C")
B2 <- c("G", "G", "C", "C", "G", "C") 

C1 <- c("A", "A", "A", "A", "A", "A", "A", "A")
C2 <- c("T", "T", "T", "T", "T", "T", "T", "T")


score_A <- 0 

for (i in 1:length(A1)) {
  if (A1[i] == A2[i]) {
    score_A = score_A + 1
  } else {
    score_A = score_A -3
  }
}

score_B <- 0 

for (i in 1:length(B1)) { 
  if (B1[i] == B2[i]) {
    score_B = score_B + 1
  } else {
    score_B = score_B -3
  }
}

score_C <- 0 

for (i in 1:length(C1)) { 
  if (C1[i] == C2[i]) {
    score_C = score_C + 1
  } else {
    score_C = score_C -3
  }
}

print("Scoren for de tre sammenstillingene er:")
print("Score A:")
print(score_A) 
print("Score_B")
print(score_B)
print("Score_C")
print(score_C)
```
## 2.2 Scoring av indel 

**S:**

A-TCT         

ATTCT      

**T:**

A---TCT

AT--TCT

**U:**

ATCT--

ATTCT-
```{r}
S1 <- c("A", "-", "T", "C", "T")
S2 <- c("A", "T", "T", "C", "T")

T1 <- c("A", "-", "-", "-", "T", "C", "T")
T2 <- c("A", "T", "-", "-", "T", "C", "T")

U1 <- c("A", "T", "C", "T", "-", "-") 
U2 <- c("A", "T", "T", "C", "T", "-") 

score_S <- 0 

for (i in seq_along(S1)) {
  if (S1[i] == S2[i] & S1[i] != "-") { # match mellom to baser 
    score_S <- score_S + 1 
  } else if (S1[i] == "-" & S2[i] == "-") { # match mellom to indel
    score_S <- score_S - 4  
  } else if ((S1[i] == "-" & S2[i] != "-") | (S1[i] != "-" & S2[i] == "-")) {
    score_S <- score_S - 4  # indel 
  } else {
    score_S <- score_S - 3  # mismatch mellom to baser 
  }
}

print("score_S:")
print(score_S)

score_T <- 0

for (i in 1:length(T1)) {
  if (T1[i] == T2[i] & T1[i] != "-") { # match mellom to baser
    score_T <- score_T + 1 
  } else if (T1[i] == "-" & T2[i] == "-") { # match mellom to indel
    score_T <- score_T - 4  
  } else if ((T1[i] == "-" & T2[i] != "-") | (T1[i] != "-" & T2[i] == "-")) {
    score_T <- score_T - 4  # indel 
  } else {
    score_T <- score_T - 3  # mismatch mellom to baser 
  }
}

print("score_T:")
print(score_T)

score_U <- 0

for (i in 1:length(U1)) {
  if (U1[i] == U2[i] & U1[i] != "-") { # match mellom to baser
    score_U <- score_U + 1 
  } else if (U1[i] == "-" & U2[i] == "-") { # match mellom to indel
    score_U <- score_U - 4  
  } else if ((U1[i] == "-" & U2[i] != "-") | (U1[i] != "-" & U2[i] == "-")) {
    score_U <- score_U - 4  # indel 
  } else {
    score_U <- score_U - 3  # mismatch mellom to baser 
  }
}

print("score_U:")
print(score_U)

```

**Hva er rart med de to siste sammenstillingene? Husk at vi alltid søker beste mulige sammenstilling. Kan du formulere et par regler inspirert av de to siste sammenstillingen over?**

- Sekvens nummer to har flere gaps midt i sekvensen, noe som gir en lavere score.

- Seksens nummer tre har en indel/gap på slutten av sekvensen, noe som gir en lavere score.

- Ingen av sekvensene følger prinsippet om å minimere gapene og maksimere matchene i sekvensene, grunnlaget for å   finne den beste mulige sammenstillingen.

**Regler for å finne beste mulige sammenstilling:**

- Gap bør kun inkluderes dersom det forbedrer sammenstillingen. 

- Gap bør plasseres på slutten av sekvensen, heller enn midt i. 

- Antall matches bør maksimeres. 

- Lokale delsekvenser bør bevares i sammenstillingen. 

# 3 Dynamisk programmering 

## 3.1 Manuell Needleman-Wunsch 

Sekvensene: 

```{r}
sek1 <- c("A","A","T","G","C","T","C")
sek2 <- c("A","T","G","C","C") 
```

Scoringstabell: 

```{r, eval=FALSE}
     A   C   G   T  -
  
A   1  -3  -3  -3  -4

C  -3   1  -3  -3  -4

G  -3  -3   1  -3  -4

T  -3  -3  -3   1  -4

-  -4  -4  -4  -4  -4
```


Dynamisk programmeringstabell: 

```{r, eval = FALSE}
       A   A   T   G   C   T   C 

  0   -4  -8  -12 -16 -20 -24 -28

A -4  -3  -2  -6  -10 -14 -18 -22

T -8  -7  -4  -3  -7  -11 -13 -17

G -12 -9  -8  -5  -2  -6  -10 -14

C -16 -13 -10 -9  -6  -1  -5  -9

C -20 -17 -14 -11 -10 -5  -2  -4  
```
           

Den beste sammenstillingen: 

```{r, eval=FALSE}
AATGCTC
A-TGCC- 
```


Scoren for den beste globale sammenstillingen er -4. 

## 3.2 Needleman-Wunsch og proteinsekvenser 

Sekvensene: 

HILDE 

PILSEN 

```{r, eval=FALSE}

          P   I   L   S   E   N  
        
    0    -2  -4  -6  -8  -10 -12 

H  -2    -2  -4  -6  -7  -8  -9

I  -4    -4   2   0  -2  -4  -6

L  -6    -6   0   6   4   2   0

D  -8    -5  -2   4   6   6   4

E  -10   -7  -4   2   4   11  11

```


Beste sammenstilling:

```{r, eval=FALSE}
PILSEN
HILDE- 
```


Høyeste score: 11 


## 3.3 Manuell Smith-Waterman 

Scoringsregler: 

- Likhet: 1
- Ulikhet: -1
- Indel: -1 

Sekvensene:
GGCTAGG
CAGCT 

Scoringstabell: 

```{r, eval = FALSE}

       C   A   G   C   T 
      
   0   0   0   0   0   0

G  0   0   0   1   0   0 

G  0   0   0   1   0   0 

C  0   1   0   0   2   0 
 
T  0   0   0   0   0   3 

A  0   0   1   0   0   0 

G  0   0   0   2   0   0 

G  0   0   0   1   0   0  


```

Den største scoren blir 3.  


Endre scoringsreglene: 
- Likhet: 10 
- Ulikhet: -10 
- Indel: -10 

```{r, eval = FALSE}
       C   A   G   C   T 
      
   0   0   0   0   0   0

G  0   0   0  10   0   0 

G  0   0   0  10   0   0 

C  0   0   0   0  20   0 
 
T  0   0   0   0   0  30 

A  0   0  10   0   0   0

G  0   0   0  20   0   0

G  0   0   0  10   0   0

```


Den største scoren blir 30. 


Regel: 

- De beste sammenstillingene er de som kun inneholder match og ikke indels eller mismatch. 

Gitt følgende sammenstilling:
GCTA 
GCT- 

Regel: 

- Sammenstillinger som inneholder indels, vil aldri være den beste. Innføring av indels nullstiller scoren. 


# 4 Lag en scoringstabell 

**Opplysninger:**

- Populasjonen har et GC-innhold på 0.6 -> P(G) = 0.3, P(C) = 0.3, P(A) = 0.2, P(T) = 0.2
- For beslektede sekvenser er alle de fire match-sannsynlighetene 0.2 (til sammen 0.8) 
  P(A|A) = P(C|C) = P(G|G) = P(T|T) = 0.2 
- For beslektede sekvenser er alle mismatch-sannsynlighetene like (0.2 til sammen) 
  For A har vi da: P(A|C) = P(A|T) = P(A|G) = 0.2/3 = 0.067 


**Finner sannsynlighetene for beslekta sekvenser:**

- P(a,a|beslekta): P(a|a) = 0.2

- P(a,b|beslekta): P(a|b) = (1-0.8) * 1/12 = 0.01667

**Finner sannsynligheten for match med ubeslekta sekvenser:**

P(a,a|ubeslekta): Sannsynligheten for at begge sekvenser har base a på samme posisjon = P(a) * P(a) 


- P(A,A|ubeslekta) = P(A) * P(A) = 0.2 * 0.2 = 0.04 

- P(T,T|ubeslekta) = P(T) * P(T) = 0.2 * 0.2 = 0.04 

- P(G,G|ubeslekta) = P(G) * P(G) = 0.3 * 0.3 = 0.09 

- P(C,C|ubeslekta) = P(C) * P(C) = 0.3 * 0.3 = 0.09 


*Finner sannsynligheten for mismatch med ubeslekta sekvenser:* 

P(a,b|ubeslekta) = P(A) * P(B)

- P(A,T|ubeslekta) = P(T,A|ubeslekta) = P(A) * P(T) = 0.2 * 0.2 = 0.04 

- P(A,C|ubeslekta) = P(C,A|ubeslekta) = P(A) * P(C) = 0.2 * 0.3 = 0.06 

- P(A,G|ubeslekta) = P(G,A|ubeslekta) = P(A) * P(G) = 0.2 * 0.3 = 0.06 

- P(C,T|ubeslekta) = P(T,C|ubeslekta) = P(C) * P(T) = 0.3 * 0.2 = 0.06 

- P(C,G|ubeslekta) = P(G,C|ubeslekta) = P(C) * P(G) = 0.3 * 0.3 = 0.09 

- P(G,T|ubeslekta) = P(T,G|ubeslekta) = P(G) * P(T) = 0.3 * 0.2 = 0.06 


**Beregner log-likelihood score for de ulike tilfellene:**

*S(a,a) = log2(P(a,a|beslekta)/P(a,a|ubeslekta))*

- s(A|A) = s(T|T) = s(G|G) = s(C|C) = log2(0.2/0.04) = 2.32


*S(a,b) = log2(P(a,b|beslekta)/P(a,b|ubeslekta))*


- s(A|T) = s(T|A) = log2(0.0167/0.04) = -1.26

- s(A|G) = s(G|A) = log2(0.0167/0.06) = -1.85

- s(A|C) = s(C|A) = log2(0.0167/0.06) = -1.85

- s(G|T) = s(T|G) = log2(0.0167/0.06) = -1.85
 
- s(G|C) = s(C|G) = log2(0.0167/0.09) = -2.43

- s(T|C) = s(C|T) = log2(0.0167/0.06) = -1.85


**Setter inn i scoringsmatrisen:**

```{r, eval = FALSE}
      A      T       C      G

A    2.32   -1.26  -1.85  -1.85

T   -1.26    2.32  -1.85  -1.85

C   -1.85   -1.85   2.32  -0.43

G   -1.85   -1.85  -0.43   2.32 

```


# 5 Kodende gener - sammenlikner vi DNA eller protein?

## 5.2 DATA 

```{r}
plasminogen_fna_dna <- readFasta("data/plasminogen_activator_urokinase.fna.txt") 
plasminogen_faa_amino <- readFasta("data/plasminogen_activator_urokinase.faa.txt")
```

```{r}
Species <- c("Chimpanzee", "Giant panda", "Zebrafish") 
Million_years <- c(6.4, 94, 429)
species_tbl <- data.frame(Species, Million_years)
Type <- c("DNA", "DNA", "DNA")
```

## 5.3 DNA-sammenstillinger

```{r}
# resultater fra DNA-sammenstillinger 
Seq_identity <- c(99.1, 84.8, 50.4)
Seq_similarity <- c(99.1, 84.8, 50.4)
Gaps <- c(0.0, 1.1, 32.7) 

# tabell for DNA-sammenstillinger
species_tbl <- species_tbl %>% 
  mutate(Seq_identity = Seq_identity, 
         Seq_similarity = Seq_similarity, 
         Gaps = Gaps, Type = Type)

```

Sekvensene med størst grad av likhet er de som er nærmest hverandre i evolusjonær tid, og dermed nærmest beslektet. 


## 5.4 Protein-sammenstillinger

```{r}
# resultater fra proteinsammenstillingen 
Seq_identity_protein <- c(98.8, 79.7, 37.8) 
Seq_similarity_protein <- c(99.1, 86.8, 54.7) 
Gaps_protein <- c(0.0, 0.7, 10.3)
Type_protein <- c("Protein", "Protein", "Protein")

# lag en tabell med proteinresultatene 
protein_tbl <- data.frame(Species, Million_years, Seq_identity = Seq_identity_protein, Seq_similarity = Seq_similarity_protein, Gaps = Gaps_protein, Type = Type_protein) 

# bind de to tabellene sammen 
species_tbl <- rbind(species_tbl, protein_tbl)


```

- Identity viser prosentandelen av nøyaktig like posisjoner mellom to sekvenser. For både DNA og proteiner betyr dette at kun helt identiske baser (A, T, C, G) eller aminosyrer telles.

- I proteinsekvenser tar similarity også hensyn til hvor kjemisk like aminosyrene er. Aminosyrer med lignende egenskaper (som ladning, polaritet eller størrelse) regnes som "like," selv om de ikke er identiske. For eksempel regnes lysin og arginin som lignende fordi begge er positivt ladede aminosyrer. Dette gjør at sequence similarity kan være høyere enn sequence identity i proteinsammenstillinger. 

- Kolon mellom symbolene i en posisjon betyr at aminosyrene er kjemisk like (for eksempel i ladning, polaritet eller størrelse). 

- Identitetene blir lavere når vi bruker proteinsekvenser, dette fordi det er flere mulige aminosyrer enn baser. 


## 5.5 Lokale sammenstillinger 

Resultater for sammenstilling mellom menneske og zebrafisk proteinsekvenser: 

- Sequence identity: 38.7 %
- Sequence similarity: 55.2 % 
- Gaps: 8.8 % 

Resultater for sammenstilling mellom menneske og zebrafisk DNA-sekvenser: 
- Sequence identity: 51.4 % 
- Sequence similarity: 51.4 % 
- Gaps: 31.2 % 

Resultatene for de lokale sammenstillingene er noe høyere enn for de globale sammenstillingene. Dette skyldes at lokale sammenstillinger fokuserer på mindre deler av sekvensene, og dermed er mer sannsynlig å finne identiske eller lignende regioner.


## 5.6 Oppsummering 

```{r}
# Tabell over tid siden felles opphav og sammenstillinger for DNA og protein
head(species_tbl)
```
**Prøv å lage en figur som viser resultatene, f.eks. ved å plotte tid siden siste felles opphav på x-aksen og de tre målene (identity, similarity og gaps) på y-aksen farget etter om det er DNA eller protein.**

```{r}

seq_id <- ggplot(species_tbl) +
          geom_line(aes(x = Million_years, y = Seq_identity, color = Type)) 
          labs(title = "Sammenstillinger for DNA og protein", x = "Millioner aar siden felles opphav", 
          y = "Sequence identity (%)", color = "Type") +
          theme_minimal()
  
seq_sim <- ggplot(species_tbl) +
           geom_line(aes(x = Million_years, y = Seq_similarity, color = Type)) 
           labs(title = "Sammenstillinger for DNA og protein", x = "Millioner aar siden felles opphav", 
           y = "Sequence similarity (%)", color = "Type") +
           theme_minimal()

gaps <-    ggplot(species_tbl) + 
           geom_line(aes(x = Million_years, y = Gaps, color = Type)) 
           labs(title = "Sammenstillinger for DNA og protein", x = "Millioner aar siden felles opphav", 
           y = "Gaps (%)", color = "Type") +
           theme_minimal()
           
grid.arrange(seq_id, seq_sim, gaps, ncol = 1)
```

Vi ser på plottet over at sekvensidentiteten og likheten går ned med tiden, mens gapene øker. Dette er forventet, da artene har hatt mer tid til å divergere fra hverandre. 

# 6 R-lab 

## 6.2 Matriser er ikke tabeller 

```{r}
data(BLOSUM45)
data(BLOSUM50)
data(BLOSUM62)
data(BLOSUM80)
data(BLOSUM100)
```

```{r}
knavn <- colnames(BLOSUM62)
print(knavn) 

```
De første 20 bokstavene er one-letter koden for aminosyrer. De fem neste er: 

- B: Betegner Asparagin eller Aspartat. Benyttes når det ikke er mulig å skille disse to aminosyrene (lignende struktur). 

- J: Betegner Leucin eller Isoleucin, samme begrunnelse som B

- Z: Betegner Glutamin eller Glutamat, samme begrunnelse som B 

- X: Ukjent eller uspesifisert aminosyre. Benyttes når det ikke er mulig å identifisere aminosyren. 

- *: Representerer en STOPP-kodon i sekvensen (slutten på en polypeptidkjede) 


## 6.4 Operasjoner på vektorer og matriser 

```{r}
length(BLOSUM100)
```

Funksjonen length angir antall elementer i matrisen. I denne matrisen er det 24*24 elementer = 576. 

## 6.5 Oppgaver: BLOSUM-matrisene 

```{r}
# Henter ut de første 20 radene og kolonnene i hver matrise

B45 <- BLOSUM45[1:20,1:20]
B50 <- BLOSUM50[1:20,1:20]
B62 <- BLOSUM62[1:20,1:20]
B80 <- BLOSUM80[1:20,1:20]
B100 <- BLOSUM100[1:20,1:20]

```

```{r}
# Kopier diagonaleleqmentene i hver matrise til en vektor 

diag.45 <- diag(B45)
diag.50 <- diag(B50)
diag.62 <- diag(B62)
diag.80 <- diag(B80)
diag.100 <- diag(B100)
```

```{r}
# Beregn gjennomsnittet av diagonalen i hver matrise

diag.mean <- c(mean(diag.45), mean(diag.50), mean(diag.62), mean(diag.80), mean(diag.100))
names.diag <- c("BLOSUM45", "BLOSUM50", "BLOSUM62", "BLOSUM80", "BLOSUM100")
```

```{r}
# Beregn gjennomsnittet av alle elementer som ikke er på diagonalen 

not.diag.mean.45 <- (sum(B45) - sum(diag.45)) / (length(B45) - length(diag.45))
not.diag.mean.50 <- (sum(B50) - sum(diag.50)) / (length(B50) - length(diag.50))
not.diag.mean.62 <- (sum(B62) - sum(diag.62)) / (length(B62) - length(diag.62))
not.diag.mean.80 <- (sum(B80) - sum(diag.80)) / (length(B80) - length(diag.80))
not.diag.mean.100 <- (sum(B100) - sum(diag.100)) / (length(B100) - length(diag.100))

# lagre gjennomsnittene i en vektor

not.diag.mean <- c(not.diag.mean.45, not.diag.mean.50, not.diag.mean.62, not.diag.mean.80, not.diag.mean.100)
```

```{r}
# Lag en tabell 
BLOSUM.tbl <- data.frame(names.diag, diag.mean, not.diag.mean)
colnames(BLOSUM.tbl) <- c("names", "match_score", "mismatch_score")
print(BLOSUM.tbl)
```
```{r}
# Lag en ny kolonne 'net_score', match_score + mismatch_score 
net_score <- diag.mean + not.diag.mean
BLOSUM.tbl <- cbind(BLOSUM.tbl, net_score)
```

```{r}
# Lag et stolpediagram som viser match_score, mismatch_score og net_score for hver BLOSUM-matrise 

BLOSUM_long <- BLOSUM.tbl %>% 
  pivot_longer(cols = c("match_score", "mismatch_score", "net_score"), names_to = "score_type", values_to = "score")
  
  
ggplot(BLOSUM_long, aes(x = names, y = score, fill = score_type)) + 
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Fordeling av score mellom BLOSUM-matriser", x = "BLOSUM matrix", y = "Score", fill = 'Score type') +
  theme_minimal()

```

**Hvordan varierer match_score, mismatch_score og net_score mellom de ulike BLOSUM-matrisene?**

- Match_score er høyest i BLOSUM100, mens mismatch_score er høyest i BLOSUM45. Dette er forventet, da BLOSUM100 er basert på høyt beslektede sekvenser, mens BLOSUM45 er basert på mer divergente sekvenser. Høyt beslektede sekvenser vil ha flere identiske aminosyrer, og dermed høyere match_score. 

- Net-scoren er også høyest i BLOSUM100, noe som indikerer like sekvenser. 

- BLOSUM-matriser benyttes til å forutsi hvor sannsynlig det der at to aminosyrer er byttet ut med hverandre i en evolusjonær sammenheng. En høy net score kan indikere felles opprinnelse. 


